{"version":3,"sources":["views/extra/forms/FormikView/BasicForm.js","views/extra/forms/FormikView/index.js","utils/wait.js"],"names":["stateOptions","GMTOptions","BasicForm","useState","isAlertVisible","setAlertVisible","initialValues","email","firstName","lastName","password","username","country","phone","state","timezone","birthday","policy","validationSchema","Yup","shape","required","oneOf","onSubmit","values","a","resetForm","setErrors","setStatus","setSubmitting","wait","success","submit","message","errors","handleBlur","handleChange","handleSubmit","isSubmitting","touched","Card","CardHeader","title","Divider","CardContent","Box","mb","Alert","onClose","severity","display","justifyContent","my","CircularProgress","Grid","container","spacing","item","md","xs","TextField","error","Boolean","fullWidth","helperText","label","name","onBlur","onChange","value","variant","select","SelectProps","native","map","key","mt","type","alignItems","ml","Checkbox","checked","Typography","color","Link","component","href","FormHelperText","Button","disabled","size","useStyles","makeStyles","theme","root","backgroundColor","palette","background","dark","minHeight","paddingTop","paddingBottom","FormikView","classes","Page","className","Container","maxWidth","time","Promise","res","setTimeout"],"mappings":"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","file":"static/js/17.d8a67cc1.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport * as Yup from 'yup';\nimport { Formik } from 'formik';\nimport {\n  Box,\n  Button,\n  Card,\n  CardContent,\n  CardHeader,\n  Checkbox,\n  CircularProgress,\n  Divider,\n  FormHelperText,\n  Grid,\n  Link,\n  TextField,\n  Typography\n} from '@material-ui/core';\nimport { Alert } from '@material-ui/lab';\nimport wait from 'src/utils/wait';\n\nconst stateOptions = ['UC Berkeley', 'Stanford', 'Sacramento',\n                      'Denver', 'El Poblado', 'Shih Hsin University',\n                      'San Jos√© State University'];\n\nconst GMTOptions = ['GMT-12', 'GMT-11', 'GMT-10', 'GMT-9', 'GMT-8', \n                    'GMT-7', 'GMT-6', 'GMT-5', 'GMT-4', 'GMT-3', 'GMT-2', \n                    'GMT-1', 'GMT', 'GMT+1', 'GMT+2', 'GMT+3', 'GMT+4', \n                    'GMT+5', 'GMT+6', 'GMT+7', 'GMT+8', 'GMT+9', 'GMT+10', \n                    'GMT+11', 'GMT+12'];\n\nfunction BasicForm() {\n  const [isAlertVisible, setAlertVisible] = useState(true);\n\n  return (\n    <Formik\n      initialValues={{\n        email: '',\n        firstName: '',\n        lastName: '',\n        password: '',\n        username: '',\n        country: '',\n        phone: '',\n        state: '',\n        timezone: '',\n        birthday: '',\n        policy: false\n      }}\n      validationSchema={Yup.object().shape({\n        email: Yup.string().email().required('Required'),\n        firstName: Yup.string().required('Required'),\n        lastName: Yup.string().required('Required'),\n        password: Yup.string().required('Required'),\n        username: Yup.string(),\n        phone: Yup.string().required('Required'),\n        birthday: Yup.string(),\n        country: Yup.string().required('Required'),\n        state: Yup.string().required('Required'),\n        timezone: Yup.string().required('Required'),\n        policy: Yup.boolean().oneOf([true], 'This field must be checked')\n      })}\n      onSubmit={async (values, {\n        resetForm,\n        setErrors,\n        setStatus,\n        setSubmitting\n      }) => {\n        try {\n          // Make API request\n          await wait(1000);\n          resetForm();\n          setStatus({ success: true });\n          setSubmitting(false);\n        } catch (error) {\n          setStatus({ success: false });\n          setErrors({ submit: error.message });\n          setSubmitting(false);\n        }\n      }}\n    >\n      {({\n        errors,\n        handleBlur,\n        handleChange,\n        handleSubmit,\n        isSubmitting,\n        touched,\n        values\n      }) => (\n        <Card>\n          <CardHeader title=\"Basic Form\" />\n          <Divider />\n          <CardContent>\n            {isAlertVisible && (\n              <Box mb={3}>\n                <Alert\n                  onClose={() => setAlertVisible(false)}\n                  severity=\"info\"\n                >\n                  This is an info alert - check it out!\n                </Alert>\n              </Box>\n            )}\n            {isSubmitting ? (\n              <Box\n                display=\"flex\"\n                justifyContent=\"center\"\n                my={5}\n              >\n                <CircularProgress />\n              </Box>\n            ) : (\n              <form onSubmit={handleSubmit}>\n                <Grid\n                  container\n                  spacing={2}\n                >\n                  <Grid\n                    item\n                    md={6}\n                    xs={12}\n                  >\n                    <TextField\n                      error={Boolean(touched.firstName && errors.firstName)}\n                      fullWidth\n                      helperText={touched.firstName && errors.firstName}\n                      label=\"First Name\"\n                      name=\"firstName\"\n                      onBlur={handleBlur}\n                      onChange={handleChange}\n                      value={values.firstName}\n                      variant=\"outlined\"\n                    />\n                  </Grid>\n                  <Grid\n                    item\n                    md={6}\n                    xs={12}\n                  >\n                    <TextField\n                      error={Boolean(touched.lastName && errors.lastName)}\n                      fullWidth\n                      helperText={touched.lastName && errors.lastName}\n                      label=\"Last Name\"\n                      name=\"lastName\"\n                      onBlur={handleBlur}\n                      onChange={handleChange}\n                      value={values.lastName}\n                      variant=\"outlined\"\n                    />\n                  </Grid>\n                  <Grid\n                    item\n                    md={6}\n                    xs={12}\n                  >\n                    <TextField\n                      error={Boolean(touched.username && errors.username)}\n                      fullWidth\n                      helperText={touched.username && errors.username}\n                      label=\"Username\"\n                      name=\"username\"\n                      onBlur={handleBlur}\n                      onChange={handleChange}\n                      value={values.username}\n                      variant=\"outlined\"\n                    />\n                  </Grid>\n                  <Grid\n                    item\n                    md={6}\n                    xs={12}\n                  >\n                    <TextField\n                      error={Boolean(touched.phone && errors.phone)}\n                      fullWidth\n                      helperText={touched.phone && errors.phone}\n                      label=\"Phone\"\n                      name=\"phone\"\n                      onBlur={handleBlur}\n                      onChange={handleChange}\n                      value={values.phone}\n                      variant=\"outlined\"\n                    />\n                      </Grid>\n                      <Grid\n                  item\n                  md={6}\n                  xs={12}\n                >\n                  <TextField\n                    fullWidth\n                    label=\"Select State\"\n                    name=\"state\"\n                    onChange={handleChange}\n                    select\n                    SelectProps={{ native: true }}\n                    value={values.state}\n                    variant=\"outlined\"\n                  >\n                    {stateOptions.map((state) => (\n                      <option\n                        key={state}\n                        value={state}\n                      >\n                        {state}\n                      </option>\n                    ))}\n                  </TextField>\n                      </Grid>\n                      <Grid\n                  item\n                  md={6}\n                  xs={12}\n                >\n                  <TextField\n                    fullWidth\n                    label=\"Select Timezone\"\n                    name=\"timezone\"\n                    onChange={handleChange}\n                    required\n                    select\n                    SelectProps={{ native: true }}\n                    value={values.timezone}\n                    variant=\"outlined\"\n                  >\n                    {GMTOptions.map((timezone) => (\n                      <option\n                        key={timezone}\n                        value={timezone}\n                      >\n                        {timezone}\n                      </option>\n                    ))}\n                  </TextField>\n                </Grid>\n                </Grid>\n                <Box mt={2}>\n                  <TextField\n                    error={Boolean(touched.email && errors.email)}\n                    fullWidth\n                    helperText={touched.email && errors.email}\n                    label=\"Email Address\"\n                    name=\"email\"\n                    onBlur={handleBlur}\n                    onChange={handleChange}\n                    type=\"email\"\n                    value={values.email}\n                    variant=\"outlined\"\n                  />\n                </Box>\n                <Box mt={2}>\n                  <TextField\n                    error={Boolean(touched.password && errors.password)}\n                    fullWidth\n                    helperText={touched.password && errors.password}\n                    label=\"Password\"\n                    name=\"password\"\n                    onBlur={handleBlur}\n                    onChange={handleChange}\n                    type=\"password\"\n                    value={values.password}\n                    variant=\"outlined\"\n                  />\n                </Box>\n                <Box\n                  alignItems=\"center\"\n                  display=\"flex\"\n                  mt={2}\n                  ml={-1}\n                >\n                  <Checkbox\n                    checked={values.policy}\n                    name=\"policy\"\n                    onChange={handleChange}\n                  />\n                  <Typography\n                    variant=\"body2\"\n                    color=\"textSecondary\"\n                  >\n                    I have read the\n                    {' '}\n                    <Link\n                      component=\"a\"\n                      href=\"#\"\n                      color=\"secondary\"\n                    >\n                      Terms and Conditions\n                    </Link>\n                  </Typography>\n                </Box>\n                {Boolean(touched.policy && errors.policy) && (\n                <FormHelperText error>\n                  {errors.policy}\n                </FormHelperText>\n                )}\n                <Box mt={2}>\n                  <Button\n                    color=\"secondary\"\n                    disabled={isSubmitting}\n                    fullWidth\n                    size=\"large\"\n                    type=\"submit\"\n                    variant=\"contained\"\n                  >\n                    Sign up\n                  </Button>\n                </Box>\n              </form>\n            )}\n          </CardContent>\n        </Card>\n      )}\n    </Formik>\n  );\n}\n\nexport default BasicForm;\n","import React from 'react';\n// import { Link as RouterLink } from 'react-router-dom';\nimport {\n  Box,\n  // Breadcrumbs,\n  Container,\n  Grid,\n  // Link,\n  Typography,\n  makeStyles\n} from '@material-ui/core';\n// import NavigateNextIcon from '@material-ui/icons/NavigateNext';\nimport Page from 'src/components/Page';\nimport BasicForm from './BasicForm';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    backgroundColor: theme.palette.background.dark,\n    minHeight: '100%',\n    paddingTop: theme.spacing(3),\n    paddingBottom: theme.spacing(3)\n  }\n}));\n\nfunction FormikView() {\n  const classes = useStyles();\n\n  return (\n    <Page\n      className={classes.root}\n      title=\"Formik Form\"\n    >\n      <Container maxWidth=\"lg\">\n        {/* <Breadcrumbs\n          separator={<NavigateNextIcon fontSize=\"small\" />}\n          aria-label=\"breadcrumb\"\n        >\n          <Link\n            variant=\"body1\"\n            color=\"inherit\"\n            to=\"/app\"\n            component={RouterLink}\n          >\n            Dashboard\n          </Link>\n          <Typography\n            variant=\"body1\"\n            color=\"textPrimary\"\n          >\n            Forms\n          </Typography>\n        </Breadcrumbs> */}\n        <Typography\n          variant=\"h3\"\n          color=\"textPrimary\"\n        >\n          Formik\n        </Typography>\n        <Box mt={3}>\n          <Grid container>\n            <Grid\n              item\n              xs={12}\n              md={6}\n            >\n              <BasicForm />\n            </Grid>\n          </Grid>\n        </Box>\n      </Container>\n    </Page>\n  );\n}\n\nexport default FormikView;\n","export const wait = (time) => new Promise((res) => setTimeout(res, time));\n\nexport default wait;\n"],"sourceRoot":""}